{
    "title": "Amazon EC2 Container Registry",
    "description": "Amazon Elastic Container Registry (Amazon ECR) is a managed Docker registry service. Customers can use the familiar Docker CLI to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry. Amazon ECR supports private Docker repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images. Developers can use the Docker CLI to author and manage images.",
    "docsUrl": "https://aws.amazon.com/ecr/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/ecr/2015-09-21/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://api.ecr.amazonaws.com/",
                    "http://api.ecr.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "BatchCheckLayerAvailability": {
            "main": "./lib/actions/BatchCheckLayerAvailability.js",
            "title": "BatchCheckLayerAvailability",
            "description": "Check the availability of multiple image layers in a specified registry and\nrepository.\n\nThis operation is used by the Amazon ECR proxy, and it is not intended for\ngeneral use by customers for pulling and pushing images. In most cases, you\nshould use the docker CLI to pull, tag, and push images.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/BatchCheckLayerAvailability.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "BatchDeleteImage": {
            "main": "./lib/actions/BatchDeleteImage.js",
            "title": "BatchDeleteImage",
            "description": "Deletes a list of specified images within a specified repository. Images are\nspecified with either imageTag or imageDigest.\n\nYou can remove a tag from an image by specifying the image's tag in your\nrequest. When you remove the last tag from an image, the image is deleted from\nyour repository.\n\nYou can completely delete an image (and all of its tags) by specifying the\nimage's digest in your request.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/BatchDeleteImage.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "BatchGetImage": {
            "main": "./lib/actions/BatchGetImage.js",
            "title": "BatchGetImage",
            "description": "Gets detailed information for specified images within a specified repository. Images are specified with either <code>imageTag</code> or <code>imageDigest</code>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/BatchGetImage.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CompleteLayerUpload": {
            "main": "./lib/actions/CompleteLayerUpload.js",
            "title": "CompleteLayerUpload",
            "description": "Informs Amazon ECR that the image layer upload has completed for a specified\nregistry, repository name, and upload ID. You can optionally provide a sha256 \ndigest of the image layer for data validation purposes.\n\nThis operation is used by the Amazon ECR proxy, and it is not intended for\ngeneral use by customers for pulling and pushing images. In most cases, you\nshould use the docker CLI to pull, tag, and push images.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CompleteLayerUpload.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateRepository": {
            "main": "./lib/actions/CreateRepository.js",
            "title": "CreateRepository",
            "description": "Creates an image repository.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateRepository.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteLifecyclePolicy": {
            "main": "./lib/actions/DeleteLifecyclePolicy.js",
            "title": "DeleteLifecyclePolicy",
            "description": "Deletes the specified lifecycle policy.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteLifecyclePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteRepository": {
            "main": "./lib/actions/DeleteRepository.js",
            "title": "DeleteRepository",
            "description": "Deletes an existing image repository. If a repository contains images, you must use the <code>force</code> option to delete it.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRepository.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteRepositoryPolicy": {
            "main": "./lib/actions/DeleteRepositoryPolicy.js",
            "title": "DeleteRepositoryPolicy",
            "description": "Deletes the repository policy from a specified repository.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRepositoryPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeImages": {
            "main": "./lib/actions/DescribeImages.js",
            "title": "DescribeImages",
            "description": "Returns metadata about the images in a repository, including image size, image\ntags, and creation date.\n\nBeginning with Docker version 1.9, the Docker client compresses image layers\nbefore pushing them to a V2 Docker registry. The output of the docker images \ncommand shows the uncompressed image size, so it may return a larger image size\nthan the image sizes returned by DescribeImages.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeImages.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeRepositories": {
            "main": "./lib/actions/DescribeRepositories.js",
            "title": "DescribeRepositories",
            "description": "Describes image repositories in a registry.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeRepositories.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetAuthorizationToken": {
            "main": "./lib/actions/GetAuthorizationToken.js",
            "title": "GetAuthorizationToken",
            "description": "Retrieves a token that is valid for a specified registry for 12 hours. This\ncommand allows you to use the docker CLI to push and pull images with Amazon\nECR. If you do not specify a registry, the default registry is assumed.\n\nThe authorizationToken returned for each registry specified is a base64 encoded\nstring that can be decoded and used in a docker login command to authenticate to\na registry. The AWS CLI offers an aws ecr get-login command that simplifies the\nlogin process.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetAuthorizationToken.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetDownloadUrlForLayer": {
            "main": "./lib/actions/GetDownloadUrlForLayer.js",
            "title": "GetDownloadUrlForLayer",
            "description": "Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer.\nYou can only get URLs for image layers that are referenced in an image.\n\nThis operation is used by the Amazon ECR proxy, and it is not intended for\ngeneral use by customers for pulling and pushing images. In most cases, you\nshould use the docker CLI to pull, tag, and push images.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetDownloadUrlForLayer.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetLifecyclePolicy": {
            "main": "./lib/actions/GetLifecyclePolicy.js",
            "title": "GetLifecyclePolicy",
            "description": "Retrieves the specified lifecycle policy.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetLifecyclePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetLifecyclePolicyPreview": {
            "main": "./lib/actions/GetLifecyclePolicyPreview.js",
            "title": "GetLifecyclePolicyPreview",
            "description": "Retrieves the results of the specified lifecycle policy preview request.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetLifecyclePolicyPreview.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetRepositoryPolicy": {
            "main": "./lib/actions/GetRepositoryPolicy.js",
            "title": "GetRepositoryPolicy",
            "description": "Retrieves the repository policy for a specified repository.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetRepositoryPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "InitiateLayerUpload": {
            "main": "./lib/actions/InitiateLayerUpload.js",
            "title": "InitiateLayerUpload",
            "description": "Notify Amazon ECR that you intend to upload an image layer.\n\nThis operation is used by the Amazon ECR proxy, and it is not intended for\ngeneral use by customers for pulling and pushing images. In most cases, you\nshould use the docker CLI to pull, tag, and push images.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/InitiateLayerUpload.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListImages": {
            "main": "./lib/actions/ListImages.js",
            "title": "ListImages",
            "description": "Lists all the image IDs for a given repository.\n\nYou can filter images based on whether or not they are tagged by setting the \ntagStatus parameter to TAGGED or UNTAGGED. For example, you can filter your\nresults to return only UNTAGGED images and then pipe that result to a \nBatchDeleteImage operation to delete them. Or, you can filter your results to\nreturn only TAGGED images to list all of the tags in your repository.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListImages.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTagsForResource": {
            "main": "./lib/actions/ListTagsForResource.js",
            "title": "ListTagsForResource",
            "description": "List the tags for an Amazon ECR resource.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTagsForResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutImage": {
            "main": "./lib/actions/PutImage.js",
            "title": "PutImage",
            "description": "Creates or updates the image manifest and tags associated with an image.\n\nThis operation is used by the Amazon ECR proxy, and it is not intended for\ngeneral use by customers for pulling and pushing images. In most cases, you\nshould use the docker CLI to pull, tag, and push images.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutImage.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutLifecyclePolicy": {
            "main": "./lib/actions/PutLifecyclePolicy.js",
            "title": "PutLifecyclePolicy",
            "description": "Creates or updates a lifecycle policy. For information about lifecycle policy syntax, see <a href=\"http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html\">Lifecycle Policy Template</a>.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutLifecyclePolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "SetRepositoryPolicy": {
            "main": "./lib/actions/SetRepositoryPolicy.js",
            "title": "SetRepositoryPolicy",
            "description": "Applies a repository policy on a specified repository to control access permissions.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/SetRepositoryPolicy.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "StartLifecyclePolicyPreview": {
            "main": "./lib/actions/StartLifecyclePolicyPreview.js",
            "title": "StartLifecyclePolicyPreview",
            "description": "Starts a preview of the specified lifecycle policy. This allows you to see the results before creating the lifecycle policy.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/StartLifecyclePolicyPreview.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagResource": {
            "main": "./lib/actions/TagResource.js",
            "title": "TagResource",
            "description": "Adds specified tags to a resource with the specified ARN. Existing tags on a resource are not changed if they are not specified in the request parameters.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagResource": {
            "main": "./lib/actions/UntagResource.js",
            "title": "UntagResource",
            "description": "Deletes specified tags from a resource.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UploadLayerPart": {
            "main": "./lib/actions/UploadLayerPart.js",
            "title": "UploadLayerPart",
            "description": "Uploads an image layer part to Amazon ECR.\n\nThis operation is used by the Amazon ECR proxy, and it is not intended for\ngeneral use by customers for pulling and pushing images. In most cases, you\nshould use the docker CLI to pull, tag, and push images.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UploadLayerPart.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}