{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "https://api.ecr.amazonaws.com/"
        },
        {
            "url": "http://api.ecr.amazonaws.com/"
        }
    ],
    "x-hasEquivalentPaths": true,
    "info": {
        "contact": {
            "email": "mike.ralphson@gmail.com",
            "name": "Mike Ralphson",
            "url": "https://github.com/mermade/aws2openapi",
            "x-twitter": "PermittedSoc"
        },
        "description": "Amazon Elastic Container Registry (Amazon ECR) is a managed Docker registry service. Customers can use the familiar Docker CLI to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry. Amazon ECR supports private Docker repositories with resource-based permissions using IAM so that specific users or Amazon EC2 instances can access repositories and images. Developers can use the Docker CLI to author and manage images.",
        "license": {
            "name": "Apache 2.0 License",
            "url": "http://www.apache.org/licenses/"
        },
        "termsOfService": "https://aws.amazon.com/service-terms/",
        "title": "Amazon EC2 Container Registry",
        "version": "2015-09-21",
        "x-apiClientRegistration": {
            "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
        },
        "x-apisguru-categories": [
            "cloud"
        ],
        "x-logo": {
            "backgroundColor": "#FFFFFF",
            "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
        },
        "x-origin": [
            {
                "contentType": "application/json",
                "converter": {
                    "url": "https://github.com/mermade/aws2openapi",
                    "version": "1.0.0"
                },
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ecr-2015-09-21.normal.json",
                "x-apisguru-direct": true
            }
        ],
        "x-preferred": true,
        "x-providerName": "amazonaws.com",
        "x-release": "v4",
        "x-serviceName": "ecr"
    },
    "externalDocs": {
        "description": "Amazon Web Services documentation",
        "url": "https://aws.amazon.com/ecr/"
    },
    "security": [
        {
            "hmac": []
        }
    ],
    "paths": {
        "/": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Check the availability of multiple image layers in a specified registry and repository.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
                "operationId": "BatchCheckLayerAvailability",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "failures": {
                                            "description": "Any failures associated with the call.",
                                            "items": {
                                                "description": "An object representing an Amazon ECR image layer failure.",
                                                "properties": {
                                                    "failureCode": {
                                                        "description": "The failure code associated with the failure.",
                                                        "enum": [
                                                            "InvalidLayerDigest",
                                                            "MissingLayerDigest"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "failureReason": {
                                                        "description": "The reason for the failure.",
                                                        "type": "string"
                                                    },
                                                    "layerDigest": {
                                                        "description": "The layer digest associated with the failure.",
                                                        "maxLength": 1000,
                                                        "minLength": 0,
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "layers": {
                                            "description": "A list of image layer objects corresponding to the image layer references in the request.",
                                            "items": {
                                                "description": "An object representing an Amazon ECR image layer.",
                                                "properties": {
                                                    "layerAvailability": {
                                                        "description": "The availability status of the image layer.",
                                                        "enum": [
                                                            "AVAILABLE",
                                                            "UNAVAILABLE"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "layerDigest": {
                                                        "description": "The <code>sha256</code> digest of the image layer.",
                                                        "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                                                        "type": "string"
                                                    },
                                                    "layerSize": {
                                                        "description": "The size, in bytes, of the image layer.",
                                                        "type": "integer"
                                                    },
                                                    "mediaType": {
                                                        "description": "The media type of the layer, such as <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code> or <code>application/vnd.oci.image.layer.v1.tar+gzip</code>.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "layerDigests": {
                                        "description": "The digests of the image layers to check.",
                                        "items": {
                                            "maxLength": 1000,
                                            "minLength": 0,
                                            "type": "string"
                                        },
                                        "maxItems": 100,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the image layers to check. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository that is associated with the image layers to check.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName",
                                    "layerDigests"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#BatchDeleteImage": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Deletes a list of specified images within a specified repository. Images are specified with either <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the image's digest in your request.</p>",
                "operationId": "BatchDeleteImage",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "failures": [],
                                        "imageIds": [
                                            {
                                                "imageDigest": "sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f",
                                                "imageTag": "precise"
                                            }
                                        ]
                                    },
                                    "properties": {
                                        "failures": {
                                            "description": "Any failures associated with the call.",
                                            "items": {
                                                "description": "An object representing an Amazon ECR image failure.",
                                                "properties": {
                                                    "failureCode": {
                                                        "description": "The code associated with the failure.",
                                                        "enum": [
                                                            "InvalidImageDigest",
                                                            "InvalidImageTag",
                                                            "ImageTagDoesNotMatchDigest",
                                                            "ImageNotFound",
                                                            "MissingDigestAndTag"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "failureReason": {
                                                        "description": "The reason for the failure.",
                                                        "type": "string"
                                                    },
                                                    "imageId": {
                                                        "description": "The image ID associated with the failure.",
                                                        "properties": {
                                                            "imageDigest": {
                                                                "description": "The <code>sha256</code> digest of the image manifest.",
                                                                "type": "string"
                                                            },
                                                            "imageTag": {
                                                                "description": "The tag used for the image.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "imageIds": {
                                            "description": "The image IDs of the deleted images.",
                                            "items": {
                                                "description": "An object with identifying information for an Amazon ECR image.",
                                                "properties": {
                                                    "imageDigest": {
                                                        "description": "The <code>sha256</code> digest of the image manifest.",
                                                        "type": "string"
                                                    },
                                                    "imageTag": {
                                                        "description": "The tag used for the image.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "maxItems": 100,
                                            "minItems": 1,
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Deletes specified images within a specified repository. Images are specified with either the <code>imageTag</code> or <code>imageDigest</code>.",
                                "example": {
                                    "imageIds": [
                                        {
                                            "imageTag": "precise"
                                        }
                                    ],
                                    "repositoryName": "ubuntu"
                                },
                                "properties": {
                                    "imageIds": {
                                        "description": "A list of image ID references that correspond to images to delete. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.",
                                        "items": {
                                            "description": "An object with identifying information for an Amazon ECR image.",
                                            "properties": {
                                                "imageDigest": {
                                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                                    "type": "string"
                                                },
                                                "imageTag": {
                                                    "description": "The tag used for the image.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "maxItems": 100,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the image to delete. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The repository that contains the image to delete.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName",
                                    "imageIds"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#BatchGetImage": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Gets detailed information for specified images within a specified repository. Images are specified with either <code>imageTag</code> or <code>imageDigest</code>.",
                "operationId": "BatchGetImage",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "failures": [],
                                        "images": [
                                            {
                                                "imageId": {
                                                    "imageDigest": "sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a",
                                                    "imageTag": "precise"
                                                },
                                                "imageManifest": "{\n \"schemaVersion\": 1,\n \"name\": \"ubuntu\",\n \"tag\": \"precise\",\n...",
                                                "registryId": "244698725403",
                                                "repositoryName": "ubuntu"
                                            }
                                        ]
                                    },
                                    "properties": {
                                        "failures": {
                                            "description": "Any failures associated with the call.",
                                            "items": {
                                                "description": "An object representing an Amazon ECR image failure.",
                                                "properties": {
                                                    "failureCode": {
                                                        "description": "The code associated with the failure.",
                                                        "enum": [
                                                            "InvalidImageDigest",
                                                            "InvalidImageTag",
                                                            "ImageTagDoesNotMatchDigest",
                                                            "ImageNotFound",
                                                            "MissingDigestAndTag"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "failureReason": {
                                                        "description": "The reason for the failure.",
                                                        "type": "string"
                                                    },
                                                    "imageId": {
                                                        "description": "The image ID associated with the failure.",
                                                        "properties": {
                                                            "imageDigest": {
                                                                "description": "The <code>sha256</code> digest of the image manifest.",
                                                                "type": "string"
                                                            },
                                                            "imageTag": {
                                                                "description": "The tag used for the image.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "images": {
                                            "description": "A list of image objects corresponding to the image references in the request.",
                                            "items": {
                                                "description": "An object representing an Amazon ECR image.",
                                                "properties": {
                                                    "imageId": {
                                                        "description": "An object containing the image tag and image digest associated with an image.",
                                                        "properties": {
                                                            "imageDigest": {
                                                                "description": "The <code>sha256</code> digest of the image manifest.",
                                                                "type": "string"
                                                            },
                                                            "imageTag": {
                                                                "description": "The tag used for the image.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "imageManifest": {
                                                        "description": "The image manifest associated with the image.",
                                                        "type": "string"
                                                    },
                                                    "registryId": {
                                                        "description": "The AWS account ID associated with the registry containing the image.",
                                                        "pattern": "[0-9]{12}",
                                                        "type": "string"
                                                    },
                                                    "repositoryName": {
                                                        "description": "The name of the repository associated with the image.",
                                                        "maxLength": 256,
                                                        "minLength": 2,
                                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": {
                                    "imageIds": [
                                        {
                                            "imageTag": "precise"
                                        }
                                    ],
                                    "repositoryName": "ubuntu"
                                },
                                "properties": {
                                    "acceptedMediaTypes": {
                                        "description": "<p>The accepted media types for the request.</p> <p>Valid values: <code>application/vnd.docker.distribution.manifest.v1+json</code> | <code>application/vnd.docker.distribution.manifest.v2+json</code> | <code>application/vnd.oci.image.manifest.v1+json</code> </p>",
                                        "items": {
                                            "type": "string"
                                        },
                                        "maxItems": 100,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "imageIds": {
                                        "description": "A list of image ID references that correspond to images to describe. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.",
                                        "items": {
                                            "description": "An object with identifying information for an Amazon ECR image.",
                                            "properties": {
                                                "imageDigest": {
                                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                                    "type": "string"
                                                },
                                                "imageTag": {
                                                    "description": "The tag used for the image.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "maxItems": 100,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the images to describe. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The repository that contains the images to describe.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName",
                                    "imageIds"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CompleteLayerUpload": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Informs Amazon ECR that the image layer upload has completed for a specified registry, repository name, and upload ID. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
                "operationId": "CompleteLayerUpload",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "layerDigest": {
                                            "description": "The <code>sha256</code> digest of the image layer.",
                                            "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                                            "type": "string"
                                        },
                                        "registryId": {
                                            "description": "The registry ID associated with the request.",
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "repositoryName": {
                                            "description": "The repository name associated with the request.",
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        },
                                        "uploadId": {
                                            "description": "The upload ID associated with the layer.",
                                            "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "UploadNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "InvalidLayerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "LayerPartTooSmallException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "LayerAlreadyExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "EmptyUploadException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "layerDigests": {
                                        "description": "The <code>sha256</code> digest of the image layer.",
                                        "items": {
                                            "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                                            "type": "string"
                                        },
                                        "maxItems": 100,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry to which to upload layers. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository to associate with the image layer.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    },
                                    "uploadId": {
                                        "description": "The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with the image layer.",
                                        "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName",
                                    "uploadId",
                                    "layerDigests"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#CreateRepository": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates an image repository.",
                "operationId": "CreateRepository",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "repository": {
                                            "registryId": "012345678901",
                                            "repositoryArn": "arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app",
                                            "repositoryName": "project-a/nginx-web-app"
                                        }
                                    },
                                    "properties": {
                                        "repository": {
                                            "description": "The repository that was created.",
                                            "properties": {
                                                "createdAt": {
                                                    "description": "The date and time, in JavaScript date format, when the repository was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "registryId": {
                                                    "description": "The AWS account ID associated with the registry that contains the repository.",
                                                    "pattern": "[0-9]{12}",
                                                    "type": "string"
                                                },
                                                "repositoryArn": {
                                                    "description": "The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.",
                                                    "type": "string"
                                                },
                                                "repositoryName": {
                                                    "description": "The name of the repository.",
                                                    "maxLength": 256,
                                                    "minLength": 2,
                                                    "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                                    "type": "string"
                                                },
                                                "repositoryUri": {
                                                    "description": "The URI for the repository. You can use this URI for Docker <code>push</code> or <code>pull</code> operations.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidTagParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "TooManyTagsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "RepositoryAlreadyExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": {
                                    "repositoryName": "project-a/nginx-web-app"
                                },
                                "properties": {
                                    "repositoryName": {
                                        "description": "The name to use for the repository. The repository name may be specified on its own (such as <code>nginx-web-app</code>) or it can be prepended with a namespace to group the repository into a category (such as <code>project-a/nginx-web-app</code>).",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    },
                                    "tags": {
                                        "description": "<p/>",
                                        "items": {
                                            "description": "The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                                            "properties": {
                                                "Key": {
                                                    "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values.",
                                                    "type": "string"
                                                },
                                                "Value": {
                                                    "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key).",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteLifecyclePolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes the specified lifecycle policy.",
                "operationId": "DeleteLifecyclePolicy",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "lastEvaluatedAt": {
                                            "description": "The time stamp of the last time that the lifecycle policy was run.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "lifecyclePolicyText": {
                                            "description": "The JSON lifecycle policy text.",
                                            "maxLength": 30720,
                                            "minLength": 100,
                                            "type": "string"
                                        },
                                        "registryId": {
                                            "description": "The registry ID associated with the request.",
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "repositoryName": {
                                            "description": "The repository name associated with the request.",
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "LifecyclePolicyNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteRepository": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes an existing image repository. If a repository contains images, you must use the <code>force</code> option to delete it.",
                "operationId": "DeleteRepository",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "repository": {
                                            "registryId": "012345678901",
                                            "repositoryArn": "arn:aws:ecr:us-west-2:012345678901:repository/ubuntu",
                                            "repositoryName": "ubuntu"
                                        }
                                    },
                                    "properties": {
                                        "repository": {
                                            "description": "The repository that was deleted.",
                                            "properties": {
                                                "createdAt": {
                                                    "description": "The date and time, in JavaScript date format, when the repository was created.",
                                                    "format": "date-time",
                                                    "type": "string"
                                                },
                                                "registryId": {
                                                    "description": "The AWS account ID associated with the registry that contains the repository.",
                                                    "pattern": "[0-9]{12}",
                                                    "type": "string"
                                                },
                                                "repositoryArn": {
                                                    "description": "The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.",
                                                    "type": "string"
                                                },
                                                "repositoryName": {
                                                    "description": "The name of the repository.",
                                                    "maxLength": 256,
                                                    "minLength": 2,
                                                    "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                                    "type": "string"
                                                },
                                                "repositoryUri": {
                                                    "description": "The URI for the repository. You can use this URI for Docker <code>push</code> or <code>pull</code> operations.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "RepositoryNotEmptyException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": {
                                    "force": true,
                                    "repositoryName": "ubuntu"
                                },
                                "properties": {
                                    "force": {
                                        "description": " If a repository contains images, forces the deletion.",
                                        "type": "boolean"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository to delete. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository to delete.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DeleteRepositoryPolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes the repository policy from a specified repository.",
                "operationId": "DeleteRepositoryPolicy",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "policyText": "{ ... }",
                                        "registryId": "012345678901",
                                        "repositoryName": "ubuntu"
                                    },
                                    "properties": {
                                        "policyText": {
                                            "description": "The JSON repository policy that was deleted from the repository.",
                                            "maxLength": 10240,
                                            "minLength": 0,
                                            "type": "string"
                                        },
                                        "registryId": {
                                            "description": "The registry ID associated with the request.",
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "repositoryName": {
                                            "description": "The repository name associated with the request.",
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "RepositoryPolicyNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": {
                                    "repositoryName": "ubuntu"
                                },
                                "properties": {
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository policy to delete. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository that is associated with the repository policy to delete.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeImages": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Returns metadata about the images in a repository, including image size, image tags, and creation date.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
                "operationId": "DescribeImages",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "maxResults",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "imageDetails": {
                                            "description": "A list of <a>ImageDetail</a> objects that contain data about the image.",
                                            "items": {
                                                "description": "An object that describes an image returned by a <a>DescribeImages</a> operation.",
                                                "properties": {
                                                    "imageDigest": {
                                                        "description": "The <code>sha256</code> digest of the image manifest.",
                                                        "type": "string"
                                                    },
                                                    "imagePushedAt": {
                                                        "description": "The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. ",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "imageSizeInBytes": {
                                                        "description": "<p>The size, in bytes, of the image in the repository.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
                                                        "type": "integer"
                                                    },
                                                    "imageTags": {
                                                        "description": "The list of tags associated with this image.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "registryId": {
                                                        "description": "The AWS account ID associated with the registry to which this image belongs.",
                                                        "pattern": "[0-9]{12}",
                                                        "type": "string"
                                                    },
                                                    "repositoryName": {
                                                        "description": "The name of the repository to which this image belongs.",
                                                        "maxLength": 256,
                                                        "minLength": 2,
                                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "nextToken": {
                                            "description": "The <code>nextToken</code> value to include in a future <code>DescribeImages</code> request. When the results of a <code>DescribeImages</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ImageNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "filter": {
                                        "description": "The filter key and value with which to filter your <code>DescribeImages</code> results.",
                                        "properties": {
                                            "tagStatus": {
                                                "description": "The tag status with which to filter your <a>DescribeImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.",
                                                "enum": [
                                                    "TAGGED",
                                                    "UNTAGGED",
                                                    "ANY"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "imageIds": {
                                        "description": "The list of image IDs for the requested repository.",
                                        "items": {
                                            "description": "An object with identifying information for an Amazon ECR image.",
                                            "properties": {
                                                "imageDigest": {
                                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                                    "type": "string"
                                                },
                                                "imageTag": {
                                                    "description": "The tag used for the image.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "maxItems": 100,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "maxResults": {
                                        "description": "The maximum number of repository results returned by <code>DescribeImages</code> in paginated output. When this parameter is used, <code>DescribeImages</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeImages</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeImages</code> returns up to 100 results and a <code>nextToken</code> value, if applicable. This option cannot be used when you specify images with <code>imageIds</code>.",
                                        "maximum": 1000,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "nextToken": {
                                        "description": "The <code>nextToken</code> value returned from a previous paginated <code>DescribeImages</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return. This option cannot be used when you specify images with <code>imageIds</code>.",
                                        "type": "string"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository in which to describe images. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "A list of repositories to describe.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#DescribeRepositories": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Describes image repositories in a registry.",
                "operationId": "DescribeRepositories",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "maxResults",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "repositories": [
                                            {
                                                "registryId": "012345678910",
                                                "repositoryArn": "arn:aws:ecr:us-west-2:012345678910:repository/ubuntu",
                                                "repositoryName": "ubuntu"
                                            },
                                            {
                                                "registryId": "012345678910",
                                                "repositoryArn": "arn:aws:ecr:us-west-2:012345678910:repository/test",
                                                "repositoryName": "test"
                                            }
                                        ]
                                    },
                                    "properties": {
                                        "nextToken": {
                                            "description": "The <code>nextToken</code> value to include in a future <code>DescribeRepositories</code> request. When the results of a <code>DescribeRepositories</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.",
                                            "type": "string"
                                        },
                                        "repositories": {
                                            "description": "A list of repository objects corresponding to valid repositories.",
                                            "items": {
                                                "description": "An object representing a repository.",
                                                "properties": {
                                                    "createdAt": {
                                                        "description": "The date and time, in JavaScript date format, when the repository was created.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "registryId": {
                                                        "description": "The AWS account ID associated with the registry that contains the repository.",
                                                        "pattern": "[0-9]{12}",
                                                        "type": "string"
                                                    },
                                                    "repositoryArn": {
                                                        "description": "The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.",
                                                        "type": "string"
                                                    },
                                                    "repositoryName": {
                                                        "description": "The name of the repository.",
                                                        "maxLength": 256,
                                                        "minLength": 2,
                                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                                        "type": "string"
                                                    },
                                                    "repositoryUri": {
                                                        "description": "The URI for the repository. You can use this URI for Docker <code>push</code> or <code>pull</code> operations.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": {},
                                "properties": {
                                    "maxResults": {
                                        "description": "The maximum number of repository results returned by <code>DescribeRepositories</code> in paginated output. When this parameter is used, <code>DescribeRepositories</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeRepositories</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeRepositories</code> returns up to 100 results and a <code>nextToken</code> value, if applicable. This option cannot be used when you specify repositories with <code>repositoryNames</code>.",
                                        "maximum": 1000,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "nextToken": {
                                        "description": "<p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeRepositories</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return. This option cannot be used when you specify repositories with <code>repositoryNames</code>.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>",
                                        "type": "string"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repositories to be described. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryNames": {
                                        "description": "A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.",
                                        "items": {
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        },
                                        "maxItems": 100,
                                        "minItems": 1,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetAuthorizationToken": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Retrieves a token that is valid for a specified registry for 12 hours. This command allows you to use the <code>docker</code> CLI to push and pull images with Amazon ECR. If you do not specify a registry, the default registry is assumed.</p> <p>The <code>authorizationToken</code> returned for each registry specified is a base64 encoded string that can be decoded and used in a <code>docker login</code> command to authenticate to a registry. The AWS CLI offers an <code>aws ecr get-login</code> command that simplifies the login process.</p>",
                "operationId": "GetAuthorizationToken",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "authorizationData": [
                                            {
                                                "authorizationToken": "QVdTOkN...",
                                                "expiresAt": "1470951892432",
                                                "proxyEndpoint": "https://012345678901.dkr.ecr.us-west-2.amazonaws.com"
                                            }
                                        ]
                                    },
                                    "properties": {
                                        "authorizationData": {
                                            "description": "A list of authorization token data objects that correspond to the <code>registryIds</code> values in the request.",
                                            "items": {
                                                "description": "An object representing authorization data for an Amazon ECR registry.",
                                                "properties": {
                                                    "authorizationToken": {
                                                        "description": "A base64-encoded string that contains authorization data for the specified Amazon ECR registry. When the string is decoded, it is presented in the format <code>user:password</code> for private registry authentication using <code>docker login</code>.",
                                                        "pattern": "^\\S+$",
                                                        "type": "string"
                                                    },
                                                    "expiresAt": {
                                                        "description": "The Unix time in seconds and milliseconds when the authorization token expires. Authorization tokens are valid for 12 hours.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "proxyEndpoint": {
                                                        "description": "The registry URL to use for this authorization token in a <code>docker login</code> command. The Amazon ECR registry URL format is <code>https://aws_account_id.dkr.ecr.region.amazonaws.com</code>. For example, <code>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</code>.. ",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": {},
                                "properties": {
                                    "registryIds": {
                                        "description": "A list of AWS account IDs that are associated with the registries for which to get authorization tokens. If you do not specify a registry, the default registry is assumed.",
                                        "items": {
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "maxItems": 10,
                                        "minItems": 1,
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetDownloadUrlForLayer": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You can only get URLs for image layers that are referenced in an image.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
                "operationId": "GetDownloadUrlForLayer",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "downloadUrl": {
                                            "description": "The pre-signed Amazon S3 download URL for the requested layer.",
                                            "type": "string"
                                        },
                                        "layerDigest": {
                                            "description": "The digest of the image layer to download.",
                                            "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "LayersNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "LayerInaccessibleException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "layerDigest": {
                                        "description": "The digest of the image layer to download.",
                                        "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                                        "type": "string"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository that is associated with the image layer to download.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName",
                                    "layerDigest"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetLifecyclePolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Retrieves the specified lifecycle policy.",
                "operationId": "GetLifecyclePolicy",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "lastEvaluatedAt": {
                                            "description": "The time stamp of the last time that the lifecycle policy was run.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "lifecyclePolicyText": {
                                            "description": "The JSON lifecycle policy text.",
                                            "maxLength": 30720,
                                            "minLength": 100,
                                            "type": "string"
                                        },
                                        "registryId": {
                                            "description": "The registry ID associated with the request.",
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "repositoryName": {
                                            "description": "The repository name associated with the request.",
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "LifecyclePolicyNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetLifecyclePolicyPreview": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Retrieves the results of the specified lifecycle policy preview request.",
                "operationId": "GetLifecyclePolicyPreview",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "lifecyclePolicyText": {
                                            "description": "The JSON lifecycle policy text.",
                                            "maxLength": 30720,
                                            "minLength": 100,
                                            "type": "string"
                                        },
                                        "nextToken": {
                                            "description": "The <code>nextToken</code> value to include in a future <code>GetLifecyclePolicyPreview</code> request. When the results of a <code>GetLifecyclePolicyPreview</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.",
                                            "type": "string"
                                        },
                                        "previewResults": {
                                            "description": "The results of the lifecycle policy preview request.",
                                            "items": {
                                                "description": "The result of the lifecycle policy preview.",
                                                "properties": {
                                                    "action": {
                                                        "description": "The type of action to be taken.",
                                                        "properties": {
                                                            "type": {
                                                                "description": "The type of action to be taken.",
                                                                "enum": [
                                                                    "EXPIRE"
                                                                ],
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "appliedRulePriority": {
                                                        "description": "The priority of the applied rule.",
                                                        "minimum": 1,
                                                        "type": "integer"
                                                    },
                                                    "imageDigest": {
                                                        "description": "The <code>sha256</code> digest of the image manifest.",
                                                        "type": "string"
                                                    },
                                                    "imagePushedAt": {
                                                        "description": "The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "imageTags": {
                                                        "description": "The list of tags associated with this image.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "registryId": {
                                            "description": "The registry ID associated with the request.",
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "repositoryName": {
                                            "description": "The repository name associated with the request.",
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "The status of the lifecycle policy preview request.",
                                            "enum": [
                                                "IN_PROGRESS",
                                                "COMPLETE",
                                                "EXPIRED",
                                                "FAILED"
                                            ],
                                            "type": "string"
                                        },
                                        "summary": {
                                            "description": "The list of images that is returned as a result of the action.",
                                            "properties": {
                                                "expiringImageTotalCount": {
                                                    "description": "The number of expiring images.",
                                                    "minimum": 0,
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "LifecyclePolicyPreviewNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "filter": {
                                        "description": "An optional parameter that filters results based on image tag status and all tags, if tagged.",
                                        "properties": {
                                            "tagStatus": {
                                                "description": "The tag status of the image.",
                                                "enum": [
                                                    "TAGGED",
                                                    "UNTAGGED",
                                                    "ANY"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "imageIds": {
                                        "description": "The list of imageIDs to be included.",
                                        "items": {
                                            "description": "An object with identifying information for an Amazon ECR image.",
                                            "properties": {
                                                "imageDigest": {
                                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                                    "type": "string"
                                                },
                                                "imageTag": {
                                                    "description": "The tag used for the image.",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "maxItems": 100,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "maxResults": {
                                        "description": "The maximum number of repository results returned by <code>GetLifecyclePolicyPreviewRequest</code> in&#x2028; paginated output. When this parameter is used, <code>GetLifecyclePolicyPreviewRequest</code> only returns&#x2028; <code>maxResults</code> results in a single page along with a <code>nextToken</code>&#x2028; response element. The remaining results of the initial request can be seen by sending&#x2028; another <code>GetLifecyclePolicyPreviewRequest</code> request with the returned <code>nextToken</code>&#x2028; value. This value can be between 1 and 1000. If this&#x2028; parameter is not used, then <code>GetLifecyclePolicyPreviewRequest</code> returns up to&#x2028; 100 results and a <code>nextToken</code> value, if&#x2028; applicable. This option cannot be used when you specify images with <code>imageIds</code>.",
                                        "maximum": 100,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "nextToken": {
                                        "description": "The <code>nextToken</code> value returned from a previous paginated&#x2028; <code>GetLifecyclePolicyPreviewRequest</code> request where <code>maxResults</code> was used and the&#x2028; results exceeded the value of that parameter. Pagination continues from the end of the&#x2028; previous results that returned the <code>nextToken</code> value. This value is&#x2028; <code>null</code> when there are no more results to return. This option cannot be used when you specify images with <code>imageIds</code>.",
                                        "type": "string"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#GetRepositoryPolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Retrieves the repository policy for a specified repository.",
                "operationId": "GetRepositoryPolicy",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "policyText": "{\n  \"Version\" : \"2008-10-17\",\n  \"Statement\" : [ {\n    \"Sid\" : \"new statement\",\n    \"Effect\" : \"Allow\",\n    \"Principal\" : {\n     \"AWS\" : \"arn:aws:iam::012345678901:role/CodeDeployDemo\"\n    },\n\"Action\" : [ \"ecr:GetDownloadUrlForLayer\", \"ecr:BatchGetImage\", \"ecr:BatchCheckLayerAvailability\" ]\n } ]\n}",
                                        "registryId": "012345678901",
                                        "repositoryName": "ubuntu"
                                    },
                                    "properties": {
                                        "policyText": {
                                            "description": "The JSON repository policy text associated with the repository.",
                                            "maxLength": 10240,
                                            "minLength": 0,
                                            "type": "string"
                                        },
                                        "registryId": {
                                            "description": "The registry ID associated with the request.",
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "repositoryName": {
                                            "description": "The repository name associated with the request.",
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "RepositoryPolicyNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": {
                                    "repositoryName": "ubuntu"
                                },
                                "properties": {
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository with the policy to retrieve.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#InitiateLayerUpload": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Notify Amazon ECR that you intend to upload an image layer.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
                "operationId": "InitiateLayerUpload",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "partSize": {
                                            "description": "The size, in bytes, that Amazon ECR expects future layer part uploads to be.",
                                            "minimum": 0,
                                            "type": "integer"
                                        },
                                        "uploadId": {
                                            "description": "The upload ID for the layer upload. This parameter is passed to further <a>UploadLayerPart</a> and <a>CompleteLayerUpload</a> operations.",
                                            "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry to which you intend to upload layers. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository to which you intend to upload layers.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListImages": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Lists all the image IDs for a given repository.</p> <p>You can filter images based on whether or not they are tagged by setting the <code>tagStatus</code> parameter to <code>TAGGED</code> or <code>UNTAGGED</code>. For example, you can filter your results to return only <code>UNTAGGED</code> images and then pipe that result to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results to return only <code>TAGGED</code> images to list all of the tags in your repository.</p>",
                "operationId": "ListImages",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "maxResults",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "example": {
                                        "imageIds": [
                                            {
                                                "imageDigest": "sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a",
                                                "imageTag": "precise"
                                            }
                                        ]
                                    },
                                    "properties": {
                                        "imageIds": {
                                            "description": "The list of image IDs for the requested repository.",
                                            "items": {
                                                "description": "An object with identifying information for an Amazon ECR image.",
                                                "properties": {
                                                    "imageDigest": {
                                                        "description": "The <code>sha256</code> digest of the image manifest.",
                                                        "type": "string"
                                                    },
                                                    "imageTag": {
                                                        "description": "The tag used for the image.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "maxItems": 100,
                                            "minItems": 1,
                                            "type": "array"
                                        },
                                        "nextToken": {
                                            "description": "The <code>nextToken</code> value to include in a future <code>ListImages</code> request. When the results of a <code>ListImages</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "example": {
                                    "repositoryName": "ubuntu"
                                },
                                "properties": {
                                    "filter": {
                                        "description": "The filter key and value with which to filter your <code>ListImages</code> results.",
                                        "properties": {
                                            "tagStatus": {
                                                "description": "The tag status with which to filter your <a>ListImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.",
                                                "enum": [
                                                    "TAGGED",
                                                    "UNTAGGED",
                                                    "ANY"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "maxResults": {
                                        "description": "The maximum number of image results returned by <code>ListImages</code> in paginated output. When this parameter is used, <code>ListImages</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListImages</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 1000. If this parameter is not used, then <code>ListImages</code> returns up to 100 results and a <code>nextToken</code> value, if applicable.",
                                        "maximum": 1000,
                                        "minimum": 1,
                                        "type": "integer"
                                    },
                                    "nextToken": {
                                        "description": "<p>The <code>nextToken</code> value returned from a previous paginated <code>ListImages</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>",
                                        "type": "string"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository in which to list images. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The repository with image IDs to be listed.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#ListTagsForResource": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "List the tags for an Amazon ECR resource.",
                "operationId": "ListTagsForResource",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "tags": {
                                            "description": "The tags for the resource.",
                                            "items": {
                                                "description": "The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                                                "properties": {
                                                    "Key": {
                                                        "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values.",
                                                        "type": "string"
                                                    },
                                                    "Value": {
                                                        "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key).",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "resourceArn": {
                                        "description": "The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the only supported resource is an Amazon ECR repository.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "resourceArn"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#PutImage": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Creates or updates the image manifest and tags associated with an image.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
                "operationId": "PutImage",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "image": {
                                            "description": "Details of the image uploaded.",
                                            "properties": {
                                                "imageId": {
                                                    "description": "An object containing the image tag and image digest associated with an image.",
                                                    "properties": {
                                                        "imageDigest": {
                                                            "description": "The <code>sha256</code> digest of the image manifest.",
                                                            "type": "string"
                                                        },
                                                        "imageTag": {
                                                            "description": "The tag used for the image.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "imageManifest": {
                                                    "description": "The image manifest associated with the image.",
                                                    "type": "string"
                                                },
                                                "registryId": {
                                                    "description": "The AWS account ID associated with the registry containing the image.",
                                                    "pattern": "[0-9]{12}",
                                                    "type": "string"
                                                },
                                                "repositoryName": {
                                                    "description": "The name of the repository associated with the image.",
                                                    "maxLength": 256,
                                                    "minLength": 2,
                                                    "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "ImageAlreadyExistsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LayersNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "imageManifest": {
                                        "description": "The image manifest corresponding to the image to be uploaded.",
                                        "type": "string"
                                    },
                                    "imageTag": {
                                        "description": "The tag to associate with the image. This parameter is required for images that use the Docker Image Manifest V2 Schema 2 or OCI formats.",
                                        "type": "string"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository in which to put the image. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository in which to put the image.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName",
                                    "imageManifest"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#PutLifecyclePolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Creates or updates a lifecycle policy. For information about lifecycle policy syntax, see <a href=\"http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html\">Lifecycle Policy Template</a>.",
                "operationId": "PutLifecyclePolicy",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "lifecyclePolicyText": {
                                            "description": "The JSON repository policy text.",
                                            "maxLength": 30720,
                                            "minLength": 100,
                                            "type": "string"
                                        },
                                        "registryId": {
                                            "description": "The registry ID associated with the request.",
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "repositoryName": {
                                            "description": "The repository name associated with the request.",
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "lifecyclePolicyText": {
                                        "description": "The JSON repository policy text to apply to the repository.",
                                        "maxLength": 30720,
                                        "minLength": 100,
                                        "type": "string"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository. If you do&#x2028; not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository to receive the policy.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName",
                                    "lifecyclePolicyText"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#SetRepositoryPolicy": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Applies a repository policy on a specified repository to control access permissions.",
                "operationId": "SetRepositoryPolicy",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "policyText": {
                                            "description": "The JSON repository policy text applied to the repository.",
                                            "maxLength": 10240,
                                            "minLength": 0,
                                            "type": "string"
                                        },
                                        "registryId": {
                                            "description": "The registry ID associated with the request.",
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "repositoryName": {
                                            "description": "The repository name associated with the request.",
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "force": {
                                        "description": "If the policy you are attempting to set on a repository policy would prevent you from setting another policy in the future, you must force the <a>SetRepositoryPolicy</a> operation. This is intended to prevent accidental repository lock outs.",
                                        "type": "boolean"
                                    },
                                    "policyText": {
                                        "description": "The JSON repository policy text to apply to the repository.",
                                        "maxLength": 10240,
                                        "minLength": 0,
                                        "type": "string"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository to receive the policy.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName",
                                    "policyText"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#StartLifecyclePolicyPreview": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Starts a preview of the specified lifecycle policy. This allows you to see the results before creating the lifecycle policy.",
                "operationId": "StartLifecyclePolicyPreview",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "lifecyclePolicyText": {
                                            "description": "The JSON repository policy text.",
                                            "maxLength": 30720,
                                            "minLength": 100,
                                            "type": "string"
                                        },
                                        "registryId": {
                                            "description": "The registry ID associated with the request.",
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "repositoryName": {
                                            "description": "The repository name associated with the request.",
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        },
                                        "status": {
                                            "description": "The status of the lifecycle policy preview request.",
                                            "enum": [
                                                "IN_PROGRESS",
                                                "COMPLETE",
                                                "EXPIRED",
                                                "FAILED"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "LifecyclePolicyNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LifecyclePolicyPreviewInProgressException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "lifecyclePolicyText": {
                                        "description": "The policy to be evaluated against. If you do not specify a policy, the current policy for the repository is used.",
                                        "maxLength": 30720,
                                        "minLength": 100,
                                        "type": "string"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository to be evaluated.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#TagResource": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Adds specified tags to a resource with the specified ARN. Existing tags on a resource are not changed if they are not specified in the request parameters.",
                "operationId": "TagResource",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidTagParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyTagsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "resourceArn": {
                                        "description": "The Amazon Resource Name (ARN) of the the resource to which to add tags. Currently, the only supported resource is an Amazon ECR repository.",
                                        "type": "string"
                                    },
                                    "tags": {
                                        "description": "The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                                        "items": {
                                            "description": "The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                                            "properties": {
                                                "Key": {
                                                    "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values.",
                                                    "type": "string"
                                                },
                                                "Value": {
                                                    "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key).",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "resourceArn",
                                    "tags"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UntagResource": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Deletes specified tags from a resource.",
                "operationId": "UntagResource",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {},
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidTagParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "TooManyTagsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "resourceArn": {
                                        "description": "The Amazon Resource Name (ARN) of the resource from which to remove tags. Currently, the only supported resource is an Amazon ECR repository.",
                                        "type": "string"
                                    },
                                    "tagKeys": {
                                        "description": "The keys of the tags to be removed.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "resourceArn",
                                    "tagKeys"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/#UploadLayerPart": {
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "<p>Uploads an image layer part to Amazon ECR.</p> <note> <p>This operation is used by the Amazon ECR proxy, and it is not intended for general use by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>",
                "operationId": "UploadLayerPart",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "lastByteReceived": {
                                            "description": "The integer value of the last byte received in the request.",
                                            "minimum": 0,
                                            "type": "integer"
                                        },
                                        "registryId": {
                                            "description": "The registry ID associated with the request.",
                                            "pattern": "[0-9]{12}",
                                            "type": "string"
                                        },
                                        "repositoryName": {
                                            "description": "The repository name associated with the request.",
                                            "maxLength": 256,
                                            "minLength": 2,
                                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                            "type": "string"
                                        },
                                        "uploadId": {
                                            "description": "The upload ID associated with the request.",
                                            "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "ServerException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "InvalidParameterException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InvalidLayerPartException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "RepositoryNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "UploadNotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "layerPartBlob": {
                                        "description": "The base64-encoded layer part payload.",
                                        "type": "string"
                                    },
                                    "partFirstByte": {
                                        "description": "The integer value of the first byte of the layer part.",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "partLastByte": {
                                        "description": "The integer value of the last byte of the layer part.",
                                        "minimum": 0,
                                        "type": "integer"
                                    },
                                    "registryId": {
                                        "description": "The AWS account ID associated with the registry to which you are uploading layer parts. If you do not specify a registry, the default registry is assumed.",
                                        "pattern": "[0-9]{12}",
                                        "type": "string"
                                    },
                                    "repositoryName": {
                                        "description": "The name of the repository to which you are uploading layer parts.",
                                        "maxLength": 256,
                                        "minLength": 2,
                                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                        "type": "string"
                                    },
                                    "uploadId": {
                                        "description": "The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with the layer part upload.",
                                        "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "repositoryName",
                                    "uploadId",
                                    "partFirstByte",
                                    "partLastByte",
                                    "layerPartBlob"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Arn": {
                "type": "string"
            },
            "AuthorizationData": {
                "description": "An object representing authorization data for an Amazon ECR registry.",
                "properties": {
                    "authorizationToken": {
                        "description": "A base64-encoded string that contains authorization data for the specified Amazon ECR registry. When the string is decoded, it is presented in the format <code>user:password</code> for private registry authentication using <code>docker login</code>.",
                        "pattern": "^\\S+$",
                        "type": "string"
                    },
                    "expiresAt": {
                        "description": "The Unix time in seconds and milliseconds when the authorization token expires. Authorization tokens are valid for 12 hours.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "proxyEndpoint": {
                        "description": "The registry URL to use for this authorization token in a <code>docker login</code> command. The Amazon ECR registry URL format is <code>https://aws_account_id.dkr.ecr.region.amazonaws.com</code>. For example, <code>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</code>.. ",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AuthorizationDataList": {
                "items": {
                    "description": "An object representing authorization data for an Amazon ECR registry.",
                    "properties": {
                        "authorizationToken": {
                            "description": "A base64-encoded string that contains authorization data for the specified Amazon ECR registry. When the string is decoded, it is presented in the format <code>user:password</code> for private registry authentication using <code>docker login</code>.",
                            "pattern": "^\\S+$",
                            "type": "string"
                        },
                        "expiresAt": {
                            "description": "The Unix time in seconds and milliseconds when the authorization token expires. Authorization tokens are valid for 12 hours.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "proxyEndpoint": {
                            "description": "The registry URL to use for this authorization token in a <code>docker login</code> command. The Amazon ECR registry URL format is <code>https://aws_account_id.dkr.ecr.region.amazonaws.com</code>. For example, <code>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</code>.. ",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "Base64": {
                "pattern": "^\\S+$",
                "type": "string"
            },
            "BatchCheckLayerAvailabilityRequest": {
                "properties": {
                    "layerDigests": {
                        "description": "The digests of the image layers to check.",
                        "items": {
                            "maxLength": 1000,
                            "minLength": 0,
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the image layers to check. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository that is associated with the image layers to check.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName",
                    "layerDigests"
                ],
                "type": "object"
            },
            "BatchCheckLayerAvailabilityResponse": {
                "properties": {
                    "failures": {
                        "description": "Any failures associated with the call.",
                        "items": {
                            "description": "An object representing an Amazon ECR image layer failure.",
                            "properties": {
                                "failureCode": {
                                    "description": "The failure code associated with the failure.",
                                    "enum": [
                                        "InvalidLayerDigest",
                                        "MissingLayerDigest"
                                    ],
                                    "type": "string"
                                },
                                "failureReason": {
                                    "description": "The reason for the failure.",
                                    "type": "string"
                                },
                                "layerDigest": {
                                    "description": "The layer digest associated with the failure.",
                                    "maxLength": 1000,
                                    "minLength": 0,
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "layers": {
                        "description": "A list of image layer objects corresponding to the image layer references in the request.",
                        "items": {
                            "description": "An object representing an Amazon ECR image layer.",
                            "properties": {
                                "layerAvailability": {
                                    "description": "The availability status of the image layer.",
                                    "enum": [
                                        "AVAILABLE",
                                        "UNAVAILABLE"
                                    ],
                                    "type": "string"
                                },
                                "layerDigest": {
                                    "description": "The <code>sha256</code> digest of the image layer.",
                                    "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                                    "type": "string"
                                },
                                "layerSize": {
                                    "description": "The size, in bytes, of the image layer.",
                                    "type": "integer"
                                },
                                "mediaType": {
                                    "description": "The media type of the layer, such as <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code> or <code>application/vnd.oci.image.layer.v1.tar+gzip</code>.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "BatchDeleteImageRequest": {
                "description": "Deletes specified images within a specified repository. Images are specified with either the <code>imageTag</code> or <code>imageDigest</code>.",
                "example": {
                    "imageIds": [
                        {
                            "imageTag": "precise"
                        }
                    ],
                    "repositoryName": "ubuntu"
                },
                "properties": {
                    "imageIds": {
                        "description": "A list of image ID references that correspond to images to delete. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.",
                        "items": {
                            "description": "An object with identifying information for an Amazon ECR image.",
                            "properties": {
                                "imageDigest": {
                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                    "type": "string"
                                },
                                "imageTag": {
                                    "description": "The tag used for the image.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the image to delete. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository that contains the image to delete.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName",
                    "imageIds"
                ],
                "type": "object"
            },
            "BatchDeleteImageResponse": {
                "example": {
                    "failures": [],
                    "imageIds": [
                        {
                            "imageDigest": "sha256:examplee6d1e504117a17000003d3753086354a38375961f2e665416ef4b1b2f",
                            "imageTag": "precise"
                        }
                    ]
                },
                "properties": {
                    "failures": {
                        "description": "Any failures associated with the call.",
                        "items": {
                            "description": "An object representing an Amazon ECR image failure.",
                            "properties": {
                                "failureCode": {
                                    "description": "The code associated with the failure.",
                                    "enum": [
                                        "InvalidImageDigest",
                                        "InvalidImageTag",
                                        "ImageTagDoesNotMatchDigest",
                                        "ImageNotFound",
                                        "MissingDigestAndTag"
                                    ],
                                    "type": "string"
                                },
                                "failureReason": {
                                    "description": "The reason for the failure.",
                                    "type": "string"
                                },
                                "imageId": {
                                    "description": "The image ID associated with the failure.",
                                    "properties": {
                                        "imageDigest": {
                                            "description": "The <code>sha256</code> digest of the image manifest.",
                                            "type": "string"
                                        },
                                        "imageTag": {
                                            "description": "The tag used for the image.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "imageIds": {
                        "description": "The image IDs of the deleted images.",
                        "items": {
                            "description": "An object with identifying information for an Amazon ECR image.",
                            "properties": {
                                "imageDigest": {
                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                    "type": "string"
                                },
                                "imageTag": {
                                    "description": "The tag used for the image.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "BatchGetImageRequest": {
                "example": {
                    "imageIds": [
                        {
                            "imageTag": "precise"
                        }
                    ],
                    "repositoryName": "ubuntu"
                },
                "properties": {
                    "acceptedMediaTypes": {
                        "description": "<p>The accepted media types for the request.</p> <p>Valid values: <code>application/vnd.docker.distribution.manifest.v1+json</code> | <code>application/vnd.docker.distribution.manifest.v2+json</code> | <code>application/vnd.oci.image.manifest.v1+json</code> </p>",
                        "items": {
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    },
                    "imageIds": {
                        "description": "A list of image ID references that correspond to images to describe. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.",
                        "items": {
                            "description": "An object with identifying information for an Amazon ECR image.",
                            "properties": {
                                "imageDigest": {
                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                    "type": "string"
                                },
                                "imageTag": {
                                    "description": "The tag used for the image.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the images to describe. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository that contains the images to describe.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName",
                    "imageIds"
                ],
                "type": "object"
            },
            "BatchGetImageResponse": {
                "example": {
                    "failures": [],
                    "images": [
                        {
                            "imageId": {
                                "imageDigest": "sha256:example76bdff6d83a09ba2a818f0d00000063724a9ac3ba5019c56f74ebf42a",
                                "imageTag": "precise"
                            },
                            "imageManifest": "{\n \"schemaVersion\": 1,\n \"name\": \"ubuntu\",\n \"tag\": \"precise\",\n...",
                            "registryId": "244698725403",
                            "repositoryName": "ubuntu"
                        }
                    ]
                },
                "properties": {
                    "failures": {
                        "description": "Any failures associated with the call.",
                        "items": {
                            "description": "An object representing an Amazon ECR image failure.",
                            "properties": {
                                "failureCode": {
                                    "description": "The code associated with the failure.",
                                    "enum": [
                                        "InvalidImageDigest",
                                        "InvalidImageTag",
                                        "ImageTagDoesNotMatchDigest",
                                        "ImageNotFound",
                                        "MissingDigestAndTag"
                                    ],
                                    "type": "string"
                                },
                                "failureReason": {
                                    "description": "The reason for the failure.",
                                    "type": "string"
                                },
                                "imageId": {
                                    "description": "The image ID associated with the failure.",
                                    "properties": {
                                        "imageDigest": {
                                            "description": "The <code>sha256</code> digest of the image manifest.",
                                            "type": "string"
                                        },
                                        "imageTag": {
                                            "description": "The tag used for the image.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "images": {
                        "description": "A list of image objects corresponding to the image references in the request.",
                        "items": {
                            "description": "An object representing an Amazon ECR image.",
                            "properties": {
                                "imageId": {
                                    "description": "An object containing the image tag and image digest associated with an image.",
                                    "properties": {
                                        "imageDigest": {
                                            "description": "The <code>sha256</code> digest of the image manifest.",
                                            "type": "string"
                                        },
                                        "imageTag": {
                                            "description": "The tag used for the image.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "imageManifest": {
                                    "description": "The image manifest associated with the image.",
                                    "type": "string"
                                },
                                "registryId": {
                                    "description": "The AWS account ID associated with the registry containing the image.",
                                    "pattern": "[0-9]{12}",
                                    "type": "string"
                                },
                                "repositoryName": {
                                    "description": "The name of the repository associated with the image.",
                                    "maxLength": 256,
                                    "minLength": 2,
                                    "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "BatchedOperationLayerDigest": {
                "maxLength": 1000,
                "minLength": 0,
                "type": "string"
            },
            "BatchedOperationLayerDigestList": {
                "items": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                },
                "maxItems": 100,
                "minItems": 1,
                "type": "array"
            },
            "CompleteLayerUploadRequest": {
                "properties": {
                    "layerDigests": {
                        "description": "The <code>sha256</code> digest of the image layer.",
                        "items": {
                            "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry to which to upload layers. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository to associate with the image layer.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    },
                    "uploadId": {
                        "description": "The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with the image layer.",
                        "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName",
                    "uploadId",
                    "layerDigests"
                ],
                "type": "object"
            },
            "CompleteLayerUploadResponse": {
                "properties": {
                    "layerDigest": {
                        "description": "The <code>sha256</code> digest of the image layer.",
                        "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The registry ID associated with the request.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository name associated with the request.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    },
                    "uploadId": {
                        "description": "The upload ID associated with the layer.",
                        "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateRepositoryRequest": {
                "example": {
                    "repositoryName": "project-a/nginx-web-app"
                },
                "properties": {
                    "repositoryName": {
                        "description": "The name to use for the repository. The repository name may be specified on its own (such as <code>nginx-web-app</code>) or it can be prepended with a namespace to group the repository into a category (such as <code>project-a/nginx-web-app</code>).",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    },
                    "tags": {
                        "description": "<p/>",
                        "items": {
                            "description": "The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "properties": {
                                "Key": {
                                    "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values.",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key).",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "CreateRepositoryResponse": {
                "example": {
                    "repository": {
                        "registryId": "012345678901",
                        "repositoryArn": "arn:aws:ecr:us-west-2:012345678901:repository/project-a/nginx-web-app",
                        "repositoryName": "project-a/nginx-web-app"
                    }
                },
                "properties": {
                    "repository": {
                        "description": "The repository that was created.",
                        "properties": {
                            "createdAt": {
                                "description": "The date and time, in JavaScript date format, when the repository was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "registryId": {
                                "description": "The AWS account ID associated with the registry that contains the repository.",
                                "pattern": "[0-9]{12}",
                                "type": "string"
                            },
                            "repositoryArn": {
                                "description": "The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.",
                                "type": "string"
                            },
                            "repositoryName": {
                                "description": "The name of the repository.",
                                "maxLength": 256,
                                "minLength": 2,
                                "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                "type": "string"
                            },
                            "repositoryUri": {
                                "description": "The URI for the repository. You can use this URI for Docker <code>push</code> or <code>pull</code> operations.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CreationTimestamp": {
                "format": "date-time",
                "type": "string"
            },
            "DeleteLifecyclePolicyRequest": {
                "properties": {
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "DeleteLifecyclePolicyResponse": {
                "properties": {
                    "lastEvaluatedAt": {
                        "description": "The time stamp of the last time that the lifecycle policy was run.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "lifecyclePolicyText": {
                        "description": "The JSON lifecycle policy text.",
                        "maxLength": 30720,
                        "minLength": 100,
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The registry ID associated with the request.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository name associated with the request.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DeleteRepositoryPolicyRequest": {
                "example": {
                    "repositoryName": "ubuntu"
                },
                "properties": {
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository policy to delete. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository that is associated with the repository policy to delete.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "DeleteRepositoryPolicyResponse": {
                "example": {
                    "policyText": "{ ... }",
                    "registryId": "012345678901",
                    "repositoryName": "ubuntu"
                },
                "properties": {
                    "policyText": {
                        "description": "The JSON repository policy that was deleted from the repository.",
                        "maxLength": 10240,
                        "minLength": 0,
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The registry ID associated with the request.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository name associated with the request.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DeleteRepositoryRequest": {
                "example": {
                    "force": true,
                    "repositoryName": "ubuntu"
                },
                "properties": {
                    "force": {
                        "description": " If a repository contains images, forces the deletion.",
                        "type": "boolean"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository to delete. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository to delete.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "DeleteRepositoryResponse": {
                "example": {
                    "repository": {
                        "registryId": "012345678901",
                        "repositoryArn": "arn:aws:ecr:us-west-2:012345678901:repository/ubuntu",
                        "repositoryName": "ubuntu"
                    }
                },
                "properties": {
                    "repository": {
                        "description": "The repository that was deleted.",
                        "properties": {
                            "createdAt": {
                                "description": "The date and time, in JavaScript date format, when the repository was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "registryId": {
                                "description": "The AWS account ID associated with the registry that contains the repository.",
                                "pattern": "[0-9]{12}",
                                "type": "string"
                            },
                            "repositoryArn": {
                                "description": "The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.",
                                "type": "string"
                            },
                            "repositoryName": {
                                "description": "The name of the repository.",
                                "maxLength": 256,
                                "minLength": 2,
                                "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                "type": "string"
                            },
                            "repositoryUri": {
                                "description": "The URI for the repository. You can use this URI for Docker <code>push</code> or <code>pull</code> operations.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "DescribeImagesFilter": {
                "description": "An object representing a filter on a <a>DescribeImages</a> operation.",
                "properties": {
                    "tagStatus": {
                        "description": "The tag status with which to filter your <a>DescribeImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.",
                        "enum": [
                            "TAGGED",
                            "UNTAGGED",
                            "ANY"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeImagesRequest": {
                "properties": {
                    "filter": {
                        "description": "The filter key and value with which to filter your <code>DescribeImages</code> results.",
                        "properties": {
                            "tagStatus": {
                                "description": "The tag status with which to filter your <a>DescribeImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.",
                                "enum": [
                                    "TAGGED",
                                    "UNTAGGED",
                                    "ANY"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "imageIds": {
                        "description": "The list of image IDs for the requested repository.",
                        "items": {
                            "description": "An object with identifying information for an Amazon ECR image.",
                            "properties": {
                                "imageDigest": {
                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                    "type": "string"
                                },
                                "imageTag": {
                                    "description": "The tag used for the image.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    },
                    "maxResults": {
                        "description": "The maximum number of repository results returned by <code>DescribeImages</code> in paginated output. When this parameter is used, <code>DescribeImages</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeImages</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeImages</code> returns up to 100 results and a <code>nextToken</code> value, if applicable. This option cannot be used when you specify images with <code>imageIds</code>.",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "nextToken": {
                        "description": "The <code>nextToken</code> value returned from a previous paginated <code>DescribeImages</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return. This option cannot be used when you specify images with <code>imageIds</code>.",
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository in which to describe images. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "A list of repositories to describe.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "DescribeImagesResponse": {
                "properties": {
                    "imageDetails": {
                        "description": "A list of <a>ImageDetail</a> objects that contain data about the image.",
                        "items": {
                            "description": "An object that describes an image returned by a <a>DescribeImages</a> operation.",
                            "properties": {
                                "imageDigest": {
                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                    "type": "string"
                                },
                                "imagePushedAt": {
                                    "description": "The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. ",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "imageSizeInBytes": {
                                    "description": "<p>The size, in bytes, of the image in the repository.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
                                    "type": "integer"
                                },
                                "imageTags": {
                                    "description": "The list of tags associated with this image.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "registryId": {
                                    "description": "The AWS account ID associated with the registry to which this image belongs.",
                                    "pattern": "[0-9]{12}",
                                    "type": "string"
                                },
                                "repositoryName": {
                                    "description": "The name of the repository to which this image belongs.",
                                    "maxLength": 256,
                                    "minLength": 2,
                                    "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "nextToken": {
                        "description": "The <code>nextToken</code> value to include in a future <code>DescribeImages</code> request. When the results of a <code>DescribeImages</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DescribeRepositoriesRequest": {
                "example": {},
                "properties": {
                    "maxResults": {
                        "description": "The maximum number of repository results returned by <code>DescribeRepositories</code> in paginated output. When this parameter is used, <code>DescribeRepositories</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeRepositories</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeRepositories</code> returns up to 100 results and a <code>nextToken</code> value, if applicable. This option cannot be used when you specify repositories with <code>repositoryNames</code>.",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "nextToken": {
                        "description": "<p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeRepositories</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return. This option cannot be used when you specify repositories with <code>repositoryNames</code>.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>",
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repositories to be described. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryNames": {
                        "description": "A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.",
                        "items": {
                            "maxLength": 256,
                            "minLength": 2,
                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                            "type": "string"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "DescribeRepositoriesResponse": {
                "example": {
                    "repositories": [
                        {
                            "registryId": "012345678910",
                            "repositoryArn": "arn:aws:ecr:us-west-2:012345678910:repository/ubuntu",
                            "repositoryName": "ubuntu"
                        },
                        {
                            "registryId": "012345678910",
                            "repositoryArn": "arn:aws:ecr:us-west-2:012345678910:repository/test",
                            "repositoryName": "test"
                        }
                    ]
                },
                "properties": {
                    "nextToken": {
                        "description": "The <code>nextToken</code> value to include in a future <code>DescribeRepositories</code> request. When the results of a <code>DescribeRepositories</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.",
                        "type": "string"
                    },
                    "repositories": {
                        "description": "A list of repository objects corresponding to valid repositories.",
                        "items": {
                            "description": "An object representing a repository.",
                            "properties": {
                                "createdAt": {
                                    "description": "The date and time, in JavaScript date format, when the repository was created.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "registryId": {
                                    "description": "The AWS account ID associated with the registry that contains the repository.",
                                    "pattern": "[0-9]{12}",
                                    "type": "string"
                                },
                                "repositoryArn": {
                                    "description": "The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.",
                                    "type": "string"
                                },
                                "repositoryName": {
                                    "description": "The name of the repository.",
                                    "maxLength": 256,
                                    "minLength": 2,
                                    "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                    "type": "string"
                                },
                                "repositoryUri": {
                                    "description": "The URI for the repository. You can use this URI for Docker <code>push</code> or <code>pull</code> operations.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "EmptyUploadException": {},
            "EvaluationTimestamp": {
                "format": "date-time",
                "type": "string"
            },
            "ExpirationTimestamp": {
                "format": "date-time",
                "type": "string"
            },
            "ForceFlag": {
                "type": "boolean"
            },
            "GetAuthorizationTokenRegistryIdList": {
                "items": {
                    "pattern": "[0-9]{12}",
                    "type": "string"
                },
                "maxItems": 10,
                "minItems": 1,
                "type": "array"
            },
            "GetAuthorizationTokenRequest": {
                "example": {},
                "properties": {
                    "registryIds": {
                        "description": "A list of AWS account IDs that are associated with the registries for which to get authorization tokens. If you do not specify a registry, the default registry is assumed.",
                        "items": {
                            "pattern": "[0-9]{12}",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 1,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GetAuthorizationTokenResponse": {
                "example": {
                    "authorizationData": [
                        {
                            "authorizationToken": "QVdTOkN...",
                            "expiresAt": "1470951892432",
                            "proxyEndpoint": "https://012345678901.dkr.ecr.us-west-2.amazonaws.com"
                        }
                    ]
                },
                "properties": {
                    "authorizationData": {
                        "description": "A list of authorization token data objects that correspond to the <code>registryIds</code> values in the request.",
                        "items": {
                            "description": "An object representing authorization data for an Amazon ECR registry.",
                            "properties": {
                                "authorizationToken": {
                                    "description": "A base64-encoded string that contains authorization data for the specified Amazon ECR registry. When the string is decoded, it is presented in the format <code>user:password</code> for private registry authentication using <code>docker login</code>.",
                                    "pattern": "^\\S+$",
                                    "type": "string"
                                },
                                "expiresAt": {
                                    "description": "The Unix time in seconds and milliseconds when the authorization token expires. Authorization tokens are valid for 12 hours.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "proxyEndpoint": {
                                    "description": "The registry URL to use for this authorization token in a <code>docker login</code> command. The Amazon ECR registry URL format is <code>https://aws_account_id.dkr.ecr.region.amazonaws.com</code>. For example, <code>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</code>.. ",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GetDownloadUrlForLayerRequest": {
                "properties": {
                    "layerDigest": {
                        "description": "The digest of the image layer to download.",
                        "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository that is associated with the image layer to download.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName",
                    "layerDigest"
                ],
                "type": "object"
            },
            "GetDownloadUrlForLayerResponse": {
                "properties": {
                    "downloadUrl": {
                        "description": "The pre-signed Amazon S3 download URL for the requested layer.",
                        "type": "string"
                    },
                    "layerDigest": {
                        "description": "The digest of the image layer to download.",
                        "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetLifecyclePolicyPreviewRequest": {
                "properties": {
                    "filter": {
                        "description": "An optional parameter that filters results based on image tag status and all tags, if tagged.",
                        "properties": {
                            "tagStatus": {
                                "description": "The tag status of the image.",
                                "enum": [
                                    "TAGGED",
                                    "UNTAGGED",
                                    "ANY"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "imageIds": {
                        "description": "The list of imageIDs to be included.",
                        "items": {
                            "description": "An object with identifying information for an Amazon ECR image.",
                            "properties": {
                                "imageDigest": {
                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                    "type": "string"
                                },
                                "imageTag": {
                                    "description": "The tag used for the image.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    },
                    "maxResults": {
                        "description": "The maximum number of repository results returned by <code>GetLifecyclePolicyPreviewRequest</code> in&#x2028; paginated output. When this parameter is used, <code>GetLifecyclePolicyPreviewRequest</code> only returns&#x2028; <code>maxResults</code> results in a single page along with a <code>nextToken</code>&#x2028; response element. The remaining results of the initial request can be seen by sending&#x2028; another <code>GetLifecyclePolicyPreviewRequest</code> request with the returned <code>nextToken</code>&#x2028; value. This value can be between 1 and 1000. If this&#x2028; parameter is not used, then <code>GetLifecyclePolicyPreviewRequest</code> returns up to&#x2028; 100 results and a <code>nextToken</code> value, if&#x2028; applicable. This option cannot be used when you specify images with <code>imageIds</code>.",
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "nextToken": {
                        "description": "The <code>nextToken</code> value returned from a previous paginated&#x2028; <code>GetLifecyclePolicyPreviewRequest</code> request where <code>maxResults</code> was used and the&#x2028; results exceeded the value of that parameter. Pagination continues from the end of the&#x2028; previous results that returned the <code>nextToken</code> value. This value is&#x2028; <code>null</code> when there are no more results to return. This option cannot be used when you specify images with <code>imageIds</code>.",
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "GetLifecyclePolicyPreviewResponse": {
                "properties": {
                    "lifecyclePolicyText": {
                        "description": "The JSON lifecycle policy text.",
                        "maxLength": 30720,
                        "minLength": 100,
                        "type": "string"
                    },
                    "nextToken": {
                        "description": "The <code>nextToken</code> value to include in a future <code>GetLifecyclePolicyPreview</code> request. When the results of a <code>GetLifecyclePolicyPreview</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.",
                        "type": "string"
                    },
                    "previewResults": {
                        "description": "The results of the lifecycle policy preview request.",
                        "items": {
                            "description": "The result of the lifecycle policy preview.",
                            "properties": {
                                "action": {
                                    "description": "The type of action to be taken.",
                                    "properties": {
                                        "type": {
                                            "description": "The type of action to be taken.",
                                            "enum": [
                                                "EXPIRE"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                },
                                "appliedRulePriority": {
                                    "description": "The priority of the applied rule.",
                                    "minimum": 1,
                                    "type": "integer"
                                },
                                "imageDigest": {
                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                    "type": "string"
                                },
                                "imagePushedAt": {
                                    "description": "The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "imageTags": {
                                    "description": "The list of tags associated with this image.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "registryId": {
                        "description": "The registry ID associated with the request.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository name associated with the request.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the lifecycle policy preview request.",
                        "enum": [
                            "IN_PROGRESS",
                            "COMPLETE",
                            "EXPIRED",
                            "FAILED"
                        ],
                        "type": "string"
                    },
                    "summary": {
                        "description": "The list of images that is returned as a result of the action.",
                        "properties": {
                            "expiringImageTotalCount": {
                                "description": "The number of expiring images.",
                                "minimum": 0,
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "GetLifecyclePolicyRequest": {
                "properties": {
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "GetLifecyclePolicyResponse": {
                "properties": {
                    "lastEvaluatedAt": {
                        "description": "The time stamp of the last time that the lifecycle policy was run.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "lifecyclePolicyText": {
                        "description": "The JSON lifecycle policy text.",
                        "maxLength": 30720,
                        "minLength": 100,
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The registry ID associated with the request.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository name associated with the request.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GetRepositoryPolicyRequest": {
                "example": {
                    "repositoryName": "ubuntu"
                },
                "properties": {
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository with the policy to retrieve.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "GetRepositoryPolicyResponse": {
                "example": {
                    "policyText": "{\n  \"Version\" : \"2008-10-17\",\n  \"Statement\" : [ {\n    \"Sid\" : \"new statement\",\n    \"Effect\" : \"Allow\",\n    \"Principal\" : {\n     \"AWS\" : \"arn:aws:iam::012345678901:role/CodeDeployDemo\"\n    },\n\"Action\" : [ \"ecr:GetDownloadUrlForLayer\", \"ecr:BatchGetImage\", \"ecr:BatchCheckLayerAvailability\" ]\n } ]\n}",
                    "registryId": "012345678901",
                    "repositoryName": "ubuntu"
                },
                "properties": {
                    "policyText": {
                        "description": "The JSON repository policy text associated with the repository.",
                        "maxLength": 10240,
                        "minLength": 0,
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The registry ID associated with the request.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository name associated with the request.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Image": {
                "description": "An object representing an Amazon ECR image.",
                "properties": {
                    "imageId": {
                        "description": "An object containing the image tag and image digest associated with an image.",
                        "properties": {
                            "imageDigest": {
                                "description": "The <code>sha256</code> digest of the image manifest.",
                                "type": "string"
                            },
                            "imageTag": {
                                "description": "The tag used for the image.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "imageManifest": {
                        "description": "The image manifest associated with the image.",
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry containing the image.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository associated with the image.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ImageActionType": {
                "enum": [
                    "EXPIRE"
                ],
                "type": "string"
            },
            "ImageAlreadyExistsException": {},
            "ImageCount": {
                "minimum": 0,
                "type": "integer"
            },
            "ImageDetail": {
                "description": "An object that describes an image returned by a <a>DescribeImages</a> operation.",
                "properties": {
                    "imageDigest": {
                        "description": "The <code>sha256</code> digest of the image manifest.",
                        "type": "string"
                    },
                    "imagePushedAt": {
                        "description": "The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. ",
                        "format": "date-time",
                        "type": "string"
                    },
                    "imageSizeInBytes": {
                        "description": "<p>The size, in bytes, of the image in the repository.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
                        "type": "integer"
                    },
                    "imageTags": {
                        "description": "The list of tags associated with this image.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry to which this image belongs.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository to which this image belongs.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ImageDetailList": {
                "items": {
                    "description": "An object that describes an image returned by a <a>DescribeImages</a> operation.",
                    "properties": {
                        "imageDigest": {
                            "description": "The <code>sha256</code> digest of the image manifest.",
                            "type": "string"
                        },
                        "imagePushedAt": {
                            "description": "The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. ",
                            "format": "date-time",
                            "type": "string"
                        },
                        "imageSizeInBytes": {
                            "description": "<p>The size, in bytes, of the image in the repository.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by <a>DescribeImages</a>.</p> </note>",
                            "type": "integer"
                        },
                        "imageTags": {
                            "description": "The list of tags associated with this image.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "registryId": {
                            "description": "The AWS account ID associated with the registry to which this image belongs.",
                            "pattern": "[0-9]{12}",
                            "type": "string"
                        },
                        "repositoryName": {
                            "description": "The name of the repository to which this image belongs.",
                            "maxLength": 256,
                            "minLength": 2,
                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ImageDigest": {
                "type": "string"
            },
            "ImageFailure": {
                "description": "An object representing an Amazon ECR image failure.",
                "properties": {
                    "failureCode": {
                        "description": "The code associated with the failure.",
                        "enum": [
                            "InvalidImageDigest",
                            "InvalidImageTag",
                            "ImageTagDoesNotMatchDigest",
                            "ImageNotFound",
                            "MissingDigestAndTag"
                        ],
                        "type": "string"
                    },
                    "failureReason": {
                        "description": "The reason for the failure.",
                        "type": "string"
                    },
                    "imageId": {
                        "description": "The image ID associated with the failure.",
                        "properties": {
                            "imageDigest": {
                                "description": "The <code>sha256</code> digest of the image manifest.",
                                "type": "string"
                            },
                            "imageTag": {
                                "description": "The tag used for the image.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ImageFailureCode": {
                "enum": [
                    "InvalidImageDigest",
                    "InvalidImageTag",
                    "ImageTagDoesNotMatchDigest",
                    "ImageNotFound",
                    "MissingDigestAndTag"
                ],
                "type": "string"
            },
            "ImageFailureList": {
                "items": {
                    "description": "An object representing an Amazon ECR image failure.",
                    "properties": {
                        "failureCode": {
                            "description": "The code associated with the failure.",
                            "enum": [
                                "InvalidImageDigest",
                                "InvalidImageTag",
                                "ImageTagDoesNotMatchDigest",
                                "ImageNotFound",
                                "MissingDigestAndTag"
                            ],
                            "type": "string"
                        },
                        "failureReason": {
                            "description": "The reason for the failure.",
                            "type": "string"
                        },
                        "imageId": {
                            "description": "The image ID associated with the failure.",
                            "properties": {
                                "imageDigest": {
                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                    "type": "string"
                                },
                                "imageTag": {
                                    "description": "The tag used for the image.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ImageFailureReason": {
                "type": "string"
            },
            "ImageIdentifier": {
                "description": "An object with identifying information for an Amazon ECR image.",
                "properties": {
                    "imageDigest": {
                        "description": "The <code>sha256</code> digest of the image manifest.",
                        "type": "string"
                    },
                    "imageTag": {
                        "description": "The tag used for the image.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ImageIdentifierList": {
                "items": {
                    "description": "An object with identifying information for an Amazon ECR image.",
                    "properties": {
                        "imageDigest": {
                            "description": "The <code>sha256</code> digest of the image manifest.",
                            "type": "string"
                        },
                        "imageTag": {
                            "description": "The tag used for the image.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "maxItems": 100,
                "minItems": 1,
                "type": "array"
            },
            "ImageList": {
                "items": {
                    "description": "An object representing an Amazon ECR image.",
                    "properties": {
                        "imageId": {
                            "description": "An object containing the image tag and image digest associated with an image.",
                            "properties": {
                                "imageDigest": {
                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                    "type": "string"
                                },
                                "imageTag": {
                                    "description": "The tag used for the image.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "imageManifest": {
                            "description": "The image manifest associated with the image.",
                            "type": "string"
                        },
                        "registryId": {
                            "description": "The AWS account ID associated with the registry containing the image.",
                            "pattern": "[0-9]{12}",
                            "type": "string"
                        },
                        "repositoryName": {
                            "description": "The name of the repository associated with the image.",
                            "maxLength": 256,
                            "minLength": 2,
                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "ImageManifest": {
                "type": "string"
            },
            "ImageNotFoundException": {},
            "ImageSizeInBytes": {
                "type": "integer"
            },
            "ImageTag": {
                "type": "string"
            },
            "ImageTagList": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "InitiateLayerUploadRequest": {
                "properties": {
                    "registryId": {
                        "description": "The AWS account ID associated with the registry to which you intend to upload layers. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository to which you intend to upload layers.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "InitiateLayerUploadResponse": {
                "properties": {
                    "partSize": {
                        "description": "The size, in bytes, that Amazon ECR expects future layer part uploads to be.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "uploadId": {
                        "description": "The upload ID for the layer upload. This parameter is passed to further <a>UploadLayerPart</a> and <a>CompleteLayerUpload</a> operations.",
                        "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "InvalidLayerException": {},
            "InvalidLayerPartException": {},
            "InvalidParameterException": {},
            "InvalidTagParameterException": {},
            "Layer": {
                "description": "An object representing an Amazon ECR image layer.",
                "properties": {
                    "layerAvailability": {
                        "description": "The availability status of the image layer.",
                        "enum": [
                            "AVAILABLE",
                            "UNAVAILABLE"
                        ],
                        "type": "string"
                    },
                    "layerDigest": {
                        "description": "The <code>sha256</code> digest of the image layer.",
                        "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                        "type": "string"
                    },
                    "layerSize": {
                        "description": "The size, in bytes, of the image layer.",
                        "type": "integer"
                    },
                    "mediaType": {
                        "description": "The media type of the layer, such as <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code> or <code>application/vnd.oci.image.layer.v1.tar+gzip</code>.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LayerAlreadyExistsException": {},
            "LayerAvailability": {
                "enum": [
                    "AVAILABLE",
                    "UNAVAILABLE"
                ],
                "type": "string"
            },
            "LayerDigest": {
                "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                "type": "string"
            },
            "LayerDigestList": {
                "items": {
                    "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                    "type": "string"
                },
                "maxItems": 100,
                "minItems": 1,
                "type": "array"
            },
            "LayerFailure": {
                "description": "An object representing an Amazon ECR image layer failure.",
                "properties": {
                    "failureCode": {
                        "description": "The failure code associated with the failure.",
                        "enum": [
                            "InvalidLayerDigest",
                            "MissingLayerDigest"
                        ],
                        "type": "string"
                    },
                    "failureReason": {
                        "description": "The reason for the failure.",
                        "type": "string"
                    },
                    "layerDigest": {
                        "description": "The layer digest associated with the failure.",
                        "maxLength": 1000,
                        "minLength": 0,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LayerFailureCode": {
                "enum": [
                    "InvalidLayerDigest",
                    "MissingLayerDigest"
                ],
                "type": "string"
            },
            "LayerFailureList": {
                "items": {
                    "description": "An object representing an Amazon ECR image layer failure.",
                    "properties": {
                        "failureCode": {
                            "description": "The failure code associated with the failure.",
                            "enum": [
                                "InvalidLayerDigest",
                                "MissingLayerDigest"
                            ],
                            "type": "string"
                        },
                        "failureReason": {
                            "description": "The reason for the failure.",
                            "type": "string"
                        },
                        "layerDigest": {
                            "description": "The layer digest associated with the failure.",
                            "maxLength": 1000,
                            "minLength": 0,
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "LayerFailureReason": {
                "type": "string"
            },
            "LayerInaccessibleException": {},
            "LayerList": {
                "items": {
                    "description": "An object representing an Amazon ECR image layer.",
                    "properties": {
                        "layerAvailability": {
                            "description": "The availability status of the image layer.",
                            "enum": [
                                "AVAILABLE",
                                "UNAVAILABLE"
                            ],
                            "type": "string"
                        },
                        "layerDigest": {
                            "description": "The <code>sha256</code> digest of the image layer.",
                            "pattern": "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+",
                            "type": "string"
                        },
                        "layerSize": {
                            "description": "The size, in bytes, of the image layer.",
                            "type": "integer"
                        },
                        "mediaType": {
                            "description": "The media type of the layer, such as <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code> or <code>application/vnd.oci.image.layer.v1.tar+gzip</code>.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "LayerPartBlob": {
                "type": "string"
            },
            "LayerPartTooSmallException": {},
            "LayerSizeInBytes": {
                "type": "integer"
            },
            "LayersNotFoundException": {},
            "LifecyclePolicyNotFoundException": {},
            "LifecyclePolicyPreviewFilter": {
                "description": "The filter for the lifecycle policy preview.",
                "properties": {
                    "tagStatus": {
                        "description": "The tag status of the image.",
                        "enum": [
                            "TAGGED",
                            "UNTAGGED",
                            "ANY"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LifecyclePolicyPreviewInProgressException": {},
            "LifecyclePolicyPreviewNotFoundException": {},
            "LifecyclePolicyPreviewResult": {
                "description": "The result of the lifecycle policy preview.",
                "properties": {
                    "action": {
                        "description": "The type of action to be taken.",
                        "properties": {
                            "type": {
                                "description": "The type of action to be taken.",
                                "enum": [
                                    "EXPIRE"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "appliedRulePriority": {
                        "description": "The priority of the applied rule.",
                        "minimum": 1,
                        "type": "integer"
                    },
                    "imageDigest": {
                        "description": "The <code>sha256</code> digest of the image manifest.",
                        "type": "string"
                    },
                    "imagePushedAt": {
                        "description": "The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "imageTags": {
                        "description": "The list of tags associated with this image.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "LifecyclePolicyPreviewResultList": {
                "items": {
                    "description": "The result of the lifecycle policy preview.",
                    "properties": {
                        "action": {
                            "description": "The type of action to be taken.",
                            "properties": {
                                "type": {
                                    "description": "The type of action to be taken.",
                                    "enum": [
                                        "EXPIRE"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "appliedRulePriority": {
                            "description": "The priority of the applied rule.",
                            "minimum": 1,
                            "type": "integer"
                        },
                        "imageDigest": {
                            "description": "The <code>sha256</code> digest of the image manifest.",
                            "type": "string"
                        },
                        "imagePushedAt": {
                            "description": "The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "imageTags": {
                            "description": "The list of tags associated with this image.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "LifecyclePolicyPreviewStatus": {
                "enum": [
                    "IN_PROGRESS",
                    "COMPLETE",
                    "EXPIRED",
                    "FAILED"
                ],
                "type": "string"
            },
            "LifecyclePolicyPreviewSummary": {
                "description": "The summary of the lifecycle policy preview request.",
                "properties": {
                    "expiringImageTotalCount": {
                        "description": "The number of expiring images.",
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LifecyclePolicyRuleAction": {
                "description": "The type of action to be taken.",
                "properties": {
                    "type": {
                        "description": "The type of action to be taken.",
                        "enum": [
                            "EXPIRE"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LifecyclePolicyRulePriority": {
                "minimum": 1,
                "type": "integer"
            },
            "LifecyclePolicyText": {
                "maxLength": 30720,
                "minLength": 100,
                "type": "string"
            },
            "LifecyclePreviewMaxResults": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
            },
            "LimitExceededException": {},
            "ListImagesFilter": {
                "description": "An object representing a filter on a <a>ListImages</a> operation.",
                "properties": {
                    "tagStatus": {
                        "description": "The tag status with which to filter your <a>ListImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.",
                        "enum": [
                            "TAGGED",
                            "UNTAGGED",
                            "ANY"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListImagesRequest": {
                "example": {
                    "repositoryName": "ubuntu"
                },
                "properties": {
                    "filter": {
                        "description": "The filter key and value with which to filter your <code>ListImages</code> results.",
                        "properties": {
                            "tagStatus": {
                                "description": "The tag status with which to filter your <a>ListImages</a> results. You can filter results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.",
                                "enum": [
                                    "TAGGED",
                                    "UNTAGGED",
                                    "ANY"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "maxResults": {
                        "description": "The maximum number of image results returned by <code>ListImages</code> in paginated output. When this parameter is used, <code>ListImages</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListImages</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 1000. If this parameter is not used, then <code>ListImages</code> returns up to 100 results and a <code>nextToken</code> value, if applicable.",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "nextToken": {
                        "description": "<p>The <code>nextToken</code> value returned from a previous paginated <code>ListImages</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>",
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository in which to list images. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository with image IDs to be listed.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "ListImagesResponse": {
                "example": {
                    "imageIds": [
                        {
                            "imageDigest": "sha256:764f63476bdff6d83a09ba2a818f0d35757063724a9ac3ba5019c56f74ebf42a",
                            "imageTag": "precise"
                        }
                    ]
                },
                "properties": {
                    "imageIds": {
                        "description": "The list of image IDs for the requested repository.",
                        "items": {
                            "description": "An object with identifying information for an Amazon ECR image.",
                            "properties": {
                                "imageDigest": {
                                    "description": "The <code>sha256</code> digest of the image manifest.",
                                    "type": "string"
                                },
                                "imageTag": {
                                    "description": "The tag used for the image.",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "maxItems": 100,
                        "minItems": 1,
                        "type": "array"
                    },
                    "nextToken": {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListImages</code> request. When the results of a <code>ListImages</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListTagsForResourceRequest": {
                "properties": {
                    "resourceArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the only supported resource is an Amazon ECR repository.",
                        "type": "string"
                    }
                },
                "required": [
                    "resourceArn"
                ],
                "type": "object"
            },
            "ListTagsForResourceResponse": {
                "properties": {
                    "tags": {
                        "description": "The tags for the resource.",
                        "items": {
                            "description": "The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "properties": {
                                "Key": {
                                    "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values.",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key).",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "MaxResults": {
                "maximum": 1000,
                "minimum": 1,
                "type": "integer"
            },
            "MediaType": {
                "type": "string"
            },
            "MediaTypeList": {
                "items": {
                    "type": "string"
                },
                "maxItems": 100,
                "minItems": 1,
                "type": "array"
            },
            "NextToken": {
                "type": "string"
            },
            "PartSize": {
                "minimum": 0,
                "type": "integer"
            },
            "ProxyEndpoint": {
                "type": "string"
            },
            "PushTimestamp": {
                "format": "date-time",
                "type": "string"
            },
            "PutImageRequest": {
                "properties": {
                    "imageManifest": {
                        "description": "The image manifest corresponding to the image to be uploaded.",
                        "type": "string"
                    },
                    "imageTag": {
                        "description": "The tag to associate with the image. This parameter is required for images that use the Docker Image Manifest V2 Schema 2 or OCI formats.",
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository in which to put the image. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository in which to put the image.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName",
                    "imageManifest"
                ],
                "type": "object"
            },
            "PutImageResponse": {
                "properties": {
                    "image": {
                        "description": "Details of the image uploaded.",
                        "properties": {
                            "imageId": {
                                "description": "An object containing the image tag and image digest associated with an image.",
                                "properties": {
                                    "imageDigest": {
                                        "description": "The <code>sha256</code> digest of the image manifest.",
                                        "type": "string"
                                    },
                                    "imageTag": {
                                        "description": "The tag used for the image.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "imageManifest": {
                                "description": "The image manifest associated with the image.",
                                "type": "string"
                            },
                            "registryId": {
                                "description": "The AWS account ID associated with the registry containing the image.",
                                "pattern": "[0-9]{12}",
                                "type": "string"
                            },
                            "repositoryName": {
                                "description": "The name of the repository associated with the image.",
                                "maxLength": 256,
                                "minLength": 2,
                                "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "PutLifecyclePolicyRequest": {
                "properties": {
                    "lifecyclePolicyText": {
                        "description": "The JSON repository policy text to apply to the repository.",
                        "maxLength": 30720,
                        "minLength": 100,
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository. If you do&#x2028; not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository to receive the policy.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName",
                    "lifecyclePolicyText"
                ],
                "type": "object"
            },
            "PutLifecyclePolicyResponse": {
                "properties": {
                    "lifecyclePolicyText": {
                        "description": "The JSON repository policy text.",
                        "maxLength": 30720,
                        "minLength": 100,
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The registry ID associated with the request.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository name associated with the request.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RegistryId": {
                "pattern": "[0-9]{12}",
                "type": "string"
            },
            "Repository": {
                "description": "An object representing a repository.",
                "properties": {
                    "createdAt": {
                        "description": "The date and time, in JavaScript date format, when the repository was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryArn": {
                        "description": "The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    },
                    "repositoryUri": {
                        "description": "The URI for the repository. You can use this URI for Docker <code>push</code> or <code>pull</code> operations.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RepositoryAlreadyExistsException": {},
            "RepositoryList": {
                "items": {
                    "description": "An object representing a repository.",
                    "properties": {
                        "createdAt": {
                            "description": "The date and time, in JavaScript date format, when the repository was created.",
                            "format": "date-time",
                            "type": "string"
                        },
                        "registryId": {
                            "description": "The AWS account ID associated with the registry that contains the repository.",
                            "pattern": "[0-9]{12}",
                            "type": "string"
                        },
                        "repositoryArn": {
                            "description": "The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS account ID of the repository owner, repository namespace, and repository name. For example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.",
                            "type": "string"
                        },
                        "repositoryName": {
                            "description": "The name of the repository.",
                            "maxLength": 256,
                            "minLength": 2,
                            "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                            "type": "string"
                        },
                        "repositoryUri": {
                            "description": "The URI for the repository. You can use this URI for Docker <code>push</code> or <code>pull</code> operations.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "RepositoryName": {
                "maxLength": 256,
                "minLength": 2,
                "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                "type": "string"
            },
            "RepositoryNameList": {
                "items": {
                    "maxLength": 256,
                    "minLength": 2,
                    "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                    "type": "string"
                },
                "maxItems": 100,
                "minItems": 1,
                "type": "array"
            },
            "RepositoryNotEmptyException": {},
            "RepositoryNotFoundException": {},
            "RepositoryPolicyNotFoundException": {},
            "RepositoryPolicyText": {
                "maxLength": 10240,
                "minLength": 0,
                "type": "string"
            },
            "ServerException": {},
            "SetRepositoryPolicyRequest": {
                "properties": {
                    "force": {
                        "description": "If the policy you are attempting to set on a repository policy would prevent you from setting another policy in the future, you must force the <a>SetRepositoryPolicy</a> operation. This is intended to prevent accidental repository lock outs.",
                        "type": "boolean"
                    },
                    "policyText": {
                        "description": "The JSON repository policy text to apply to the repository.",
                        "maxLength": 10240,
                        "minLength": 0,
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository to receive the policy.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName",
                    "policyText"
                ],
                "type": "object"
            },
            "SetRepositoryPolicyResponse": {
                "properties": {
                    "policyText": {
                        "description": "The JSON repository policy text applied to the repository.",
                        "maxLength": 10240,
                        "minLength": 0,
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The registry ID associated with the request.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository name associated with the request.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "StartLifecyclePolicyPreviewRequest": {
                "properties": {
                    "lifecyclePolicyText": {
                        "description": "The policy to be evaluated against. If you do not specify a policy, the current policy for the repository is used.",
                        "maxLength": 30720,
                        "minLength": 100,
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository to be evaluated.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName"
                ],
                "type": "object"
            },
            "StartLifecyclePolicyPreviewResponse": {
                "properties": {
                    "lifecyclePolicyText": {
                        "description": "The JSON repository policy text.",
                        "maxLength": 30720,
                        "minLength": 100,
                        "type": "string"
                    },
                    "registryId": {
                        "description": "The registry ID associated with the request.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository name associated with the request.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the lifecycle policy preview request.",
                        "enum": [
                            "IN_PROGRESS",
                            "COMPLETE",
                            "EXPIRED",
                            "FAILED"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Tag": {
                "description": "The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                "properties": {
                    "Key": {
                        "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values.",
                        "type": "string"
                    },
                    "Value": {
                        "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key).",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TagKey": {
                "type": "string"
            },
            "TagKeyList": {
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "TagList": {
                "items": {
                    "description": "The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                    "properties": {
                        "Key": {
                            "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values.",
                            "type": "string"
                        },
                        "Value": {
                            "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key).",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "TagResourceRequest": {
                "properties": {
                    "resourceArn": {
                        "description": "The Amazon Resource Name (ARN) of the the resource to which to add tags. Currently, the only supported resource is an Amazon ECR repository.",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                        "items": {
                            "description": "The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
                            "properties": {
                                "Key": {
                                    "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values.",
                                    "type": "string"
                                },
                                "Value": {
                                    "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key).",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "resourceArn",
                    "tags"
                ],
                "type": "object"
            },
            "TagResourceResponse": {
                "properties": {},
                "type": "object"
            },
            "TagStatus": {
                "enum": [
                    "TAGGED",
                    "UNTAGGED",
                    "ANY"
                ],
                "type": "string"
            },
            "TagValue": {
                "type": "string"
            },
            "TooManyTagsException": {},
            "UntagResourceRequest": {
                "properties": {
                    "resourceArn": {
                        "description": "The Amazon Resource Name (ARN) of the resource from which to remove tags. Currently, the only supported resource is an Amazon ECR repository.",
                        "type": "string"
                    },
                    "tagKeys": {
                        "description": "The keys of the tags to be removed.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "resourceArn",
                    "tagKeys"
                ],
                "type": "object"
            },
            "UntagResourceResponse": {
                "properties": {},
                "type": "object"
            },
            "UploadId": {
                "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                "type": "string"
            },
            "UploadLayerPartRequest": {
                "properties": {
                    "layerPartBlob": {
                        "description": "The base64-encoded layer part payload.",
                        "type": "string"
                    },
                    "partFirstByte": {
                        "description": "The integer value of the first byte of the layer part.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "partLastByte": {
                        "description": "The integer value of the last byte of the layer part.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "registryId": {
                        "description": "The AWS account ID associated with the registry to which you are uploading layer parts. If you do not specify a registry, the default registry is assumed.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The name of the repository to which you are uploading layer parts.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    },
                    "uploadId": {
                        "description": "The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with the layer part upload.",
                        "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                        "type": "string"
                    }
                },
                "required": [
                    "repositoryName",
                    "uploadId",
                    "partFirstByte",
                    "partLastByte",
                    "layerPartBlob"
                ],
                "type": "object"
            },
            "UploadLayerPartResponse": {
                "properties": {
                    "lastByteReceived": {
                        "description": "The integer value of the last byte received in the request.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "registryId": {
                        "description": "The registry ID associated with the request.",
                        "pattern": "[0-9]{12}",
                        "type": "string"
                    },
                    "repositoryName": {
                        "description": "The repository name associated with the request.",
                        "maxLength": 256,
                        "minLength": 2,
                        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                        "type": "string"
                    },
                    "uploadId": {
                        "description": "The upload ID associated with the request.",
                        "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UploadNotFoundException": {},
            "Url": {
                "type": "string"
            }
        },
        "parameters": {
            "Action": {
                "in": "query",
                "name": "Action",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "Version": {
                "in": "query",
                "name": "Version",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Algorithm": {
                "in": "header",
                "name": "X-Amz-Algorithm",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Content-Sha256": {
                "in": "header",
                "name": "X-Amz-Content-Sha256",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Credential": {
                "in": "header",
                "name": "X-Amz-Credential",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Date": {
                "in": "header",
                "name": "X-Amz-Date",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Security-Token": {
                "in": "header",
                "name": "X-Amz-Security-Token",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Signature": {
                "in": "header",
                "name": "X-Amz-Signature",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-SignedHeaders": {
                "in": "header",
                "name": "X-Amz-SignedHeaders",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "requestBodies": {
            "DeleteLifecyclePolicyBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "registryId": {
                                    "description": "The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.",
                                    "pattern": "[0-9]{12}",
                                    "type": "string"
                                },
                                "repositoryName": {
                                    "description": "The name of the repository.",
                                    "maxLength": 256,
                                    "minLength": 2,
                                    "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "repositoryName"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true
            }
        },
        "securitySchemes": {
            "hmac": {
                "description": "Amazon Signature authorization v4",
                "in": "header",
                "name": "Authorization",
                "type": "apiKey",
                "x-amazon-apigateway-authtype": "awsSigv4"
            }
        }
    }
}